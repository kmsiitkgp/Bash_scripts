(vi) 	SLOW ACCURATE TRIMMING:
		05_RNA_Seq_FAT_Cython_Trimming.sh has details of SE /PE trimming, adapter sequences, file location, batch
		job arrays etc. It will also run 05_RNA_Seq_FAT_Cython.py

		05_RNA_Seq_FAT_Cython.py has all of the trimming code in Python. It will import quality_trimmer() from 
		module FAT_Cython.c

		To create FAT_Cython.c, we make FAT_Cython.pyx and type in the Python code for quality_trimmer(). So, 
		basically , the module is the filename i.e. FAT_Cython and function is quality_trimmer(). We convert this
		Python code to Cython code, by running setup.py

		setup.py has the FAT_Cython.pyx listed in its code to convert it to FAT_Cython.c

		Now, run setup.py after correcting it's file path using the code below.
		python ~/scratch/Neeraj/scripts/setup.py build_ext --inplace

		This will create a FAT_Cython.c and FAT_Cython.cpython.so file.
		Both these files must be in same folder that has 05_RNA_Seq_FAT_Cython.py. Otherwise, you wont be able to
		import quality_trimmer() from FAT_Cython.c

(vi) 	FAST ACCURATE TRIMMING:
		05_RNA_Seq_FAT_C++.cpp has all of the trimming code in C++.

		05_RNA_Seq_FAT_C++_Trimming.sh has details of SE /PE trimming, adapter sequences, file location, batch
		job arrays etc. It will also run FAT.exe

		To create FAT.exe, use the code below
		module load gcc
		g++ ~/scratch/Neeraj/scripts/05_RNA_Seq_FAT_C++.cpp -o FAT -std=c++2a

		Move the output file after compiling i.e. FAT.exe to same directory having 05_RNA_Seq_FAT_C++_Trimming.sh










 